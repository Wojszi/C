#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<conio.h>
#include<math.h>
#include<string.h>
#include<stdlib.h>
#include<malloc.h>

struct Punkty
{
	float x;
	float y;
};
void sortowanie(float** rownanie, int w, int k) {
	for (int i = 0; i < w; i++)
	{
		if (rownanie[i][1] == 0)
		{
			for (int j = 1; j < k; j++)
			{
				int temp = 0;
				temp = rownanie[0][j];
				rownanie[0][j] = rownanie[i][j];
				rownanie[i][j] = temp;
			}
		}
	}
}
void eliminacjaGJ(float** rownanie, int w, int k) {

	float tmp = 0;
	for (int z = 0; z < w; z++)
	{
		tmp = rownanie[z][z];
		for (int i = 0; i < k; i++)
		{
			rownanie[z][i] = rownanie[z][i] / tmp;
		}
		for (int i = 0; i < w; i++)
		{
			if (i != z)
			{
				tmp = rownanie[i][z] / rownanie[z][z];
				for (int j = z; j < k; j++)
				{
					rownanie[i][j] = rownanie[i][j] - (tmp * rownanie[z][j]);
				}
			}
		}
	}
}
void check(float** rownanie, int n) {
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; j++)
		{
			if (i!=j)
			{
				if (rownanie[i][1] == rownanie[j][1]) {
					printf("Podana funkcja nie jest roznowartosciowa!!!");
					exit(1);
				}
			}
		}
	}
}

int main() {
	int n;//Liczba punktów
	printf("Podaj liczbe punktow: ");
	scanf_s("%d", &n);
	int w = n;
	int k = n + 1;

	struct Punkty* punkty;
	punkty = malloc(sizeof(struct Punkty) * n);
	if (punkty == NULL)
	{
		printf("Blad malloca punkty");
		return 0;
	}
	//zapisywanie punktow
	for (int i = 0; i < n; i++)
	{
		printf("Podaj X%d: ", i);
		scanf_s("%f", &punkty[i].x);
		printf("Podaj Y%d: ", i);
		scanf_s("%f", &punkty[i].y);
	}

	float** rownanie; //tworzenie tablicy na uklad równań
	rownanie = malloc(sizeof(float*) * w);
	if (rownanie == NULL)
	{
		printf("Blad malloca wskaznik");
		return 0;
	}
	for (int i = 0; i < w; i++)
	{
		rownanie[i] = malloc(sizeof(float) * k);
		if (rownanie[i] == NULL)
		{
			printf("Blad malloca[i]");
			return 0;
		}
	}

	//zapisanie ukladu rownan
	for (int i = 0; i < w; i++)
	{
		for (int j = 0; j < k; j++)
		{
			if (j == 0)
			{
				rownanie[i][0] = 1;
			}
			else if (j == k - 1)
			{
				rownanie[i][k - 1] = punkty[i].y;
			}
			else
			{
				rownanie[i][j] = pow(punkty[i].x, j);
			}

		}
	}

	check(rownanie, n);//zabezpieczenie przed "crashem"

	//wyznacznie wspolczynnikow
	sortowanie(rownanie, w, k);
	eliminacjaGJ(rownanie, w, k);

	//drukowanie rownania
	for (int i = 0; i < w; i++)
	{
		for (int j = 0; j < k; j++)
		{
			printf("%f  ", rownanie[i][j]);
		}
		printf("\n");
	}
	//drukowanie wyniku
	printf("\n w(x) = ");
	for (int i = 0; i < w; i++)
	{
		if (rownanie[i][n] != 0)
		{
			if (i == 0)
			{
				printf("%f", rownanie[i][n] / rownanie[i][i]);
			}
			else
			{
				printf(" + %fx^%d ", rownanie[i][n] / rownanie[i][i], i);
			}
		}
	}

	//czyszczenie tablic
	free(punkty);
	for (int i = 0; i < w; i++)
	{
		free(rownanie[i]);
	}
	free(rownanie);
}
